{
    "create_table_historical_data": "CREATE TABLE historical_data (\n    id SERIAL PRIMARY KEY,\n    epoch BIGINT NOT NULL UNIQUE,\n    timestamp TIMESTAMP WITHOUT TIME ZONE NOT NULL,\n    open NUMERIC(10, 2) NOT NULL,\n    high NUMERIC(10, 2) NOT NULL,\n    low NUMERIC(10, 2) NOT NULL,\n    close NUMERIC(10, 2) NOT NULL,\n    volume NUMERIC(10, 6) NOT NULL\n);"
    ,"create_table_quantiles_not_null": "CREATE TABLE quantiles (\n    id SERIAL PRIMARY KEY,\n    timestamp TIMESTAMP WITHOUT TIME ZONE NOT NULL,\n    open NUMERIC(10, 2) NOT NULL,\n    high NUMERIC(10, 2) NOT NULL,\n    low NUMERIC(10, 2) NOT NULL,\n    close NUMERIC(10, 2) NOT NULL,\n    volume NUMERIC(10, 6) NOT NULL\n,ar int[] NOT NULL\n    );"
    ,"create_table_quantiles": "CREATE TABLE quantiles (\n    id SERIAL PRIMARY KEY,\n    timestamp TIMESTAMP WITHOUT TIME ZONE ,\n    open NUMERIC(10, 2) ,\n    high NUMERIC(10, 2) ,\n    low NUMERIC(10, 2) ,\n    close NUMERIC(10, 2) ,\n    volume NUMERIC(10, 6) \n,ar int[] \n    );"
    ,"create_table_live_data": "CREATE TABLE live_data (\n    id SERIAL PRIMARY KEY,\n    epoch BIGINT NOT NULL UNIQUE,\n    timestamp TIMESTAMP WITHOUT TIME ZONE NOT NULL,\n    open NUMERIC(10, 2) NOT NULL,\n    high NUMERIC(10, 2) NOT NULL,\n    low NUMERIC(10, 2) NOT NULL,\n    close NUMERIC(10, 2) NOT NULL,\n    volume NUMERIC(10, 6) NOT NULL\n);"
    ,"truncate_table_live_data":"truncate table live_data"
    ,"truncate_table_historical_data":"truncate table historical_data"
    ,"create_vw_data": "create or replace view vw_data as (\n    select * from historical_data\n    union all\n    select * from live_data where epoch not in (\n        select epoch from historical_data\n    )\n)"
    ,"create_vw_agg5": "create or replace view vw_agg5 (start_epoch, end_epoch, start_time, end_time, open, close, low, high, volume) as (\n    WITH intervals AS (\n        SELECT \n            epoch/300*300 as start_epoch,\n            max(epoch) as end_epoch,\n            max(high) as high,\n            min(low)  as low,\n            sum(volume) as volume\n        FROM \n            vw_data\n        GROUP BY \n            epoch/300*300\n    )\n    select i.start_epoch, i.end_epoch, to_timestamp(i.start_epoch) as start_time, to_timestamp(end_epoch) end_time,\n        sd.open as open, sdd.close as close, i.low as low, i.high as high, i.volume as volume\n        from intervals  i \n        left join vw_data  sd \n            on i.start_epoch= sd.epoch\n        left join vw_data sdd \n            on i.end_epoch = sdd.epoch\n);"
    ,"select_live_data":"select * from vw_data order by epoch desc limit 1"
    ,"other_queries":{
        "check data consistency":"with cte as (select epoch, lead(epoch) over( order by epoch ),lag(epoch) over( order by epoch )   from vw_data  ) select max(epoch - lead),min(epoch-lead),max(epoch - lag),min(epoch-lag) from cte  where lag is not null "
    }
}
